// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
const truffleAssert = require('truffle-assertions')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        await supplyChain.Harvested((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        await supplyChain.addFarmer(originFarmerID)
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        

        // Watch the emitted event Processed()
        await supplyChain.Processed(() => {
            eventEmitted = true;
        });
        // Mark an item as Processed by calling function processtItem()
        const result1 = await supplyChain.processItem(upc, {from: originFarmerID});
        // truffleAssert.eventEmitted(result1, 'Processed');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const result = await supplyChain.fetchItemBufferTwo.call(upc);
        // Verify the result set
        assert.equal(result[5], 1, 'invalid item state');
        assert.equal(eventEmitted, true, 'invalid event emitted');
        
    })    

    // // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let emittedEvent = false;
        
        // Watch the emitted event Packed()
        // const event = supplyChain.Packed();
        await supplyChain.Packed(() => {
            emittedEvent = true;
        });

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {from: originFarmerID});
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const result2 = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(result2[5], 2, 'invalid state');
        assert.equal(emittedEvent, true, 'invalid emitted event');
    })    

    // // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        let emittedEvent = false;
        
        // Watch the emitted event ForSale()
        // const event = supplyChain.ForSale();
        supplyChain.ForSale(() => {
            emittedEvent = true;
        });

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc,productPrice, {from: originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const result = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(result[5], 3, 'invalid item State');
        assert.equal(result[4], productPrice, 'invalid price');
        assert.equal(emittedEvent, true, 'invalid event emitted');  
          
    })    

    // // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        await supplyChain.addDistributor(distributorID);

        // Declare and Initialize a variable for event
        var emittedEvent = false;
        
        // Watch the emitted event Sold()
        // const event = supplyChain.Sold();
        supplyChain.Sold(() => {
            emittedEvent = true;
        });
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: distributorID, value: productPrice});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const result1 = await supplyChain.fetchItemBufferOne.call(upc);
        const result2 = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(emittedEvent, true, 'invalid event emitted');
        assert.equal(result2[5], 4, 'invalid item State');
        assert.equal(result1[2], distributorID, 'Error: invalid owner id');
        assert.equal(result2[6], distributorID, 'Error: invalid distributorID');
        
    })    

    // // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var emittedEvent = false;
        
        // Watch the emitted event Shipped()
        // var event = supplyChain.Shipped();
        supplyChain.Shipped(() => {
            emittedEvent = true;
        });

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.shipItem(upc, {from: distributorID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const result = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(result[5], 5, 'invalid state');
        assert.equal(emittedEvent, true, 'invalid event emitted');
    })    

    // // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        await supplyChain.addRetailer(retailerID);
        let emittedEvent = false;
        
        // Watch the emitted event Received()
        // const event = supplyChain.Received();
        supplyChain.Received(() => {
            emittedEvent = true;
        });

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.receiveItem(upc, {from: retailerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultOne = await supplyChain.fetchItemBufferOne.call(upc);
        const result2 = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(emittedEvent, true, 'invalid event emitted'); 
        assert.equal(result2[7], retailerID, 'invalid retailer');
        assert.equal(result2[5], 6, 'invalid item State');
    })    

    // // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        await supplyChain.addConsumer(consumerID);
        // Declare and Initialize a variable for event
        let eventEmitted = false;
        
        // Watch the emitted event Purchased()
        // const event = supplyChain.Purchased();
        await supplyChain.Purchased(() => {
            eventEmitted = true;
        });

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.purchaseItem(upc, {from: consumerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const result1 = await supplyChain.fetchItemBufferOne.call(upc);
        const result2 = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(eventEmitted, true, 'invalid event');
        assert.equal(result2[5], 7, 'invalid state');
        assert.equal(result1[2], consumerID, 'invalid owner');
        assert.equal(result2[8], consumerID, 'invalid consumer');
    })    

    // // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const result = await supplyChain.fetchItemBufferOne(upc);
        
        // Verify the result set:
        assert.equal(result[0], sku, 'invalid itemSKU');
        assert.equal(result[1], upc, 'invalid itemUPC');
        assert.equal(result[3], originFarmerID, 'invalid farmerid');
        assert.equal(result[4], originFarmName, 'invalid farmername');
        assert.equal(result[2], consumerID, 'invalid owner');
        assert.equal(result[5], originFarmInformation, 'invalid farminfo');
        assert.equal(result[6], originFarmLatitude, 'invalid latitude');
    })

    // // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const result = await supplyChain.fetchItemBufferTwo(upc);
        
        // Verify the result set:
        assert.equal(result[0], sku);
        assert.equal(result[1], upc)
        assert.equal(result[2], productID)
        assert.equal(result[3], productNotes)
        assert.equal(result[4], productPrice)
        assert.equal(result[5], 7);
        assert.equal(result[6], distributorID)
        assert.equal(result[7], retailerID)
        assert.equal(result[8], consumerID)
        
    })

});

